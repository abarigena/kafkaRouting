version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: userkafka,routingkafka,orderskafka,notificationkafka,matchconsents
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.7.0
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9092 --list || exit 1
      interval: 30s
      timeout: 10s
      retries: 5

  kafka-ui:
    image: "provectuslabs/kafka-ui:v0.7.2"
    container_name: kafka-ui
    ports:
      - '8080:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy

  eureka-server:
    image: eureka-server:latest
    container_name: eureka-server
    ports:
      - "8100:8100"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    image: api-gateway:latest
    container_name: api-gateway
    ports:
      - "8004:8004"
    depends_on:
      eureka-server:
        condition: service_healthy
    environment:
      ACTIVE_PROFILE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8100/eureka
    networks:
      - app-network

  user-kafka:
    image: user-kafka:latest
    container_name: user-kafka
    ports:
      - "8003:8003"
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      ACTIVE_PROFILE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/userkafka
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8100/eureka
    networks:
      - app-network

  routing-kafka:
    image: routing-kafka:latest
    container_name: routing-kafka
    ports:
      - "8001:8001"
    depends_on:
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      ACTIVE_PROFILE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/routingkafka
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8100/eureka
    networks:
      - app-network

  orders-kafka:
    image: orders-kafka:latest
    container_name: orders-kafka
    ports:
      - "8012:8012"
    depends_on:
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      ACTIVE_PROFILE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/orderskafka
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8100/eureka
    networks:
      - app-network

  notification-kafka:
    image: notification-kafka:latest
    container_name: notification-kafka
    ports:
      - "8006:8006"
    depends_on:
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      ACTIVE_PROFILE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/notificationkafka
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8100/eureka
    networks:
      - app-network

  matchconsents:
    image: matchconsents:latest
    container_name: matchconsents
    ports:
      - "8011:8011"
    depends_on:
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      ACTIVE_PROFILE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/matchconsents
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8100/eureka
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data: